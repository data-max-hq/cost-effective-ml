apiVersion: ray.io/v1alpha1
kind: RayJob
metadata:
  name: rayjob-sample
spec:
  entrypoint: python3 sample_code.py
  # runtimeEnv decoded to '{
  #    "pip": [
  #        "requests==2.26.0",
  #        "pendulum==2.1.2"
  #    ],
  #    "env_vars": {
  #        "counter_name": "test_counter"
  #    }
  #}'
  runtimeEnv: ewogICAgInBpcCI6IFsKICAgICAgICAicmVxdWVzdHM9PTIuMjYuMCIsCiAgICAgICAgInBlbmR1bHVtPT0yLjEuMiIKICAgIF0sCiAgICAiZW52X3ZhcnMiOiB7ImNvdW50ZXJfbmFtZSI6ICJ0ZXN0X2NvdW50ZXIifQp9Cg==
  rayClusterSpec:
    rayVersion: '2.3.0' # should match the Ray version in the image of the containers
    # Ray head pod template
    headGroupSpec:
      # the following params are used to complete the ray start: ray start --head --block --redis-port=6379 ...
      rayStartParams:
        dashboard-host: '0.0.0.0'
        #num-cpus: '2' # can be auto-completed from the limits
      #pod template
      template:
        metadata:
          labels:
            sidecar.istio.io/inject: "false"
        spec:
          containers:
            - name: ray-head
              image: us-central1-docker.pkg.dev/sustained-drake-368613/cost-efficient-ml/ray-server:2.3.0-py38-2
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
#              volumeMounts:
#                - mountPath: /home/ray/samples
#                  name: code-sample
#          volumes:
#            # You set volumes at the Pod level, then mount them into containers inside that Pod
#            - name: code-sample
#              configMap:
#                # Provide the name of the ConfigMap you want to mount.
#                name: ray-job-code-sample
#                # An array of keys from the ConfigMap to create as files
#                items:
#                  - key: sample_code.py
#                    path: sample_code.py
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 1
        minReplicas: 1
        maxReplicas: 2
        # logical group name, for this called small-group, also can be functional
        groupName: small-group
        rayStartParams: {}
        #pod template
        template:
          metadata:
            labels:
              sidecar.istio.io/inject: "false"
          spec:
            nodeSelector:
              gpu: "true"
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: us-central1-docker.pkg.dev/sustained-drake-368613/cost-efficient-ml/ray-server:2.3.0-py38-2
                lifecycle:
                  preStop:
                    exec:
                      command: [ "/bin/sh","-c","ray stop" ]
######################Ray code sample#################################
# this sample is from https://docs.ray.io/en/latest/cluster/job-submission.html#quick-start-example
# it is mounted into the container and executed to show the Ray job at work
#---
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: ray-job-code-sample
#data:
#  sample_code.py: |
#    import ray
#    import os
#    import requests
#
#    ray.init()
#
#    @ray.remote
#    class Counter:
#        def __init__(self):
#            # Used to verify runtimeEnv
#            self.name = os.getenv("counter_name")
#            self.counter = 0
#
#        def inc(self):
#            self.counter += 1
#
#        def get_counter(self):
#            return "{} got {}".format(self.name, self.counter)
#
#    counter = Counter.remote()
#
#    for _ in range(5):
#        ray.get(counter.inc.remote())
#        print(ray.get(counter.get_counter.remote()))
#
#    print(requests.__version__)
